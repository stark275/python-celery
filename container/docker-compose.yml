version: "3.8"
networks:
  django_docker:

services:
  app:
    build: .
    restart: always
    volumes:
      - .:/django
      - ./tm/base.py:/usr/local/lib/python3.10/site-packages/django/db/backends/mysql/base.py
      - ./tm/SQLBrokerPublisher.py:/usr/local/lib/python3.10/site-packages/django/db/backends/mysql/SQLBrokerPublisher.py

    ports:
      - ${APP_PORT}:8002
    image: app:django
    container_name: django
    depends_on:
      mysql :
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    # command: python manage.py runserver 0.0.0.0:${APP_PORT}
    command: gunicorn -k uvicorn.workers.UvicornWorker -w 4 -b 0.0.0.0:${APP_PORT} --log-level debug --reload fasi.asgi:application

    networks:
      - django_docker

  mysql:
    image: mysql
    container_name: ${MYSQL_SERVICE_NAME}
    restart: unless-stopped
    tty: true
    volumes:
      - ./docker/mysql:/var/lib/mysql
      # - ./docker/ssl:/usr/lib/ssl/
    ports:
      - "33060:3306"
    healthcheck:
        test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
        interval: 10s
        timeout: 5s
        retries: 3
    environment:
      MYSQL_DATABASE: ${MYSQL_DB}
      # MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    networks:
      - django_docker

  pma:
    image: phpmyadmin/phpmyadmin
    container_name: pma_django_docker
    restart: always
    ports:
      - '${PMA_PORT}:80'
    environment:
      PMA_HOST: ${MYSQL_SERVICE_NAME}
      UPLOAD_LIMIT: 30M
      MAX_EXECUTION_TIME: 3600
    depends_on:
      - mysql
        # condition: service_healthy
    networks:
      - django_docker

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq_dgtcp_prod
    environment:
      - RABBITMQ_DEFAULT_USER=${RBTMQ_UI_USER}
      - RABBITMQ_DEFAULT_PASS=${RBTMQ_UI_PASSWORD}
    ports:
      - "${RBTMQ_PORT}:5672"
      - "${RBTMQ_UI_PORT}:15672"
    volumes:
      - ./docker/rabbitmq/data:/var/lib/rabbitmq/mnesia
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - django_docker

  dbexecutedeamon:
    build: ./tm
    volumes:
      - .:/deamon
      # - ./ssl:/usr/lib/ssl/
    image: deamon:dbe
    container_name: dbexecutedeamon
    restart: on-failure
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy    
    command: ["python3", "./tm/dbexecutedeamon.py"]
    networks:
      - django_docker
  
  ########################### Redis ############################
  rediserver:
    container_name: redis-server
    image: redis
    restart: always
    ports:
      - ${REDDIS_PORT}:6379 
    volumes:
      - ./docker/redis:/data
    entrypoint: redis-server --appendonly yes
    networks:
      - django_docker
########################### Celery Worker ############################
  celery:
    build: .
    # container_name: celery_rc
    restart: always
    # command: bash -c "celery -A fasi worker -l info --uid=$$(cat /uid.txt)"
    command: bash -c "celery -A fasi worker -l info "
    volumes:
      - .:/django
    environment:
        DOCKER_CONTAINER : 1
        # CELERY_RESULT_BACKEND : 'django-db'
        CELERY_CACHE_BACKEND :  'django-cache'
        CELERY_BROKER_URL : 'redis://redis-server:6379'
        CELERY_RESULT_BACKEND : 'redis://redis-server:6379'
        DEBUG : 'True'
        ALLOWED_HOSTS: '["*"]'
    
    depends_on:
        - app
        - rediserver
    networks:
        - django_docker